{"version":3,"file":"static/js/395.31e8f298.chunk.js","mappings":"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","sources":["components/utils/ReadMore.js","components/Card.js","components/Listings.js"],"sourcesContent":["/**\r\n * Utility function for expanding job description out\r\n */\r\n\r\nimport { Typography } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\nexport const ReadMore = ({ children }) => {\r\n    const text = children;\r\n    const [isReadMore, setIsReadMore] = useState(true);\r\n    const toggleReadMore = () => {\r\n        setIsReadMore(!isReadMore);\r\n    };\r\n    return (\r\n        <p className=\"text\" style={{fontFamily:\"Inter\", fontSize:\"small\"}}>\r\n            {isReadMore ? text.slice(0, 100) : text}\r\n            <span\r\n                onClick={toggleReadMore}\r\n                className=\"read-or-hide\"\r\n                style={{ color: \"green\" }}\r\n            >\r\n                {isReadMore ? <Typography sx={{fontWeight:'800'}}>View Job</Typography> : \" show less\"}\r\n            </span>\r\n        </p>\r\n  \r\n  );\r\n};\r\n","/**\r\n * This is where card layout is designed for listings\r\n * Lazy loaded the logos images\r\n */\r\nimport '../App.css';\r\nimport { Button, Card, Typography, createTheme, ThemeProvider } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { ReadMore } from './utils/ReadMore';\r\nimport {Grid} from \"@mui/material\";\r\n// import LazyLoad from 'react-lazyload';\r\n\r\n\r\nconst theme = createTheme({\r\n    breakpoints: {\r\n      values: {\r\n        xs: 0,\r\n        sm: 600,\r\n        md: 900,\r\n        lg: 1200,\r\n        xl: 1536,\r\n      },\r\n    },\r\n  });\r\n\r\nconst CardLayout = ({role, Location, description, company, logoUrl, \r\n    minJdSalary, maxJdSalary, minExp\r\n}) =>{\r\n    return(\r\n        <ThemeProvider theme={theme}>\r\n        <Grid item xs={12} sm={6} md={6} lg={4}>\r\n            <Card className=\"card\" sx={{ width: '80%', padding: '0.7em', borderRadius: '1em', transform: \"scale(1)\" }}>\r\n                <div className=\"Time\">\r\n                    <img src=\"https://cdn-icons-png.flaticon.com/512/3579/3579913.png\" className=\"timer-icon\"  alt=\"timer\" />\r\n                    <Typography sx={{ fontSize: '0.70em', width: '20em' }}>Posted 5 days ago</Typography>\r\n                </div>\r\n                <div className=\"company\">\r\n                    {/* <LazyLoad height={100} offset={10}> */}\r\n                        <img className=\"logo\" src={logoUrl} alt=\"logo\" />\r\n                    {/* </LazyLoad> */}\r\n                    <div className=\"main-info\">\r\n                        <Typography className=\"title\" variant=\"h6\" sx={{ fontSize: 'medium', fontWeight: '600', letterSpacing: '2px', marginBottom: '1px', cursor:\"pointer\" }}>{company}</Typography>\r\n                        <Typography sx={{ fontSize: 'medium', marginBottom: '2px' }}>{role}</Typography>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: 'small' }}>{Location}</Typography>\r\n                    </div>\r\n                </div>\r\n                <Typography sx={{ margin: '1em', color: 'Gray', width: '75%' }}>Estimated Salary: â‚¹{minJdSalary} - {maxJdSalary} LPA âœ…</Typography>\r\n\r\n                <div className=\"about\">\r\n                    <Typography variant=\"h6\" sx={{ fontSize: 'medium', fontWeight: '500' }}>About Company:</Typography>\r\n                    <Typography variant=\"h7\" sx={{ fontWeight: '600' }}>About us</Typography>\r\n                    <ReadMore>\r\n                        {description.substr(0, 150)}\r\n                    </ReadMore>\r\n                </div>\r\n\r\n                \r\n                <div>\r\n                <Typography sx={{ marginLeft: '1.3em', color: 'Gray', width: '75%', fontSize: '0.7em', letterSpacing: '1.5px' }}>Minimum Experience</Typography>\r\n                <Typography sx={{ marginLeft: '1.3em', width: '75%', fontSize: '0.8em', letterSpacing: '1.5px' }}>{!minExp ? 0 : minExp} years</Typography>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <Button\r\n                        variant='contained'\r\n                        sx={{\r\n                        width: 330,\r\n                        background: '#54efc3',\r\n                        color: 'black',\r\n                        textTransform: 'capitalize',\r\n                        marginTop: '1em',\r\n                        marginLeft: '1em',\r\n                        marginBottom: '0.5em',\r\n                        borderRadius: '0.55em',\r\n                        }}\r\n                        className=\"b1\"\r\n                    >\r\n                        âš¡Easy Apply\r\n                    </Button>\r\n                    <Button\r\n                        variant='contained'\r\n                        sx={{\r\n                        width: 330,\r\n                        background: '#0B57D0',\r\n                        color: 'white',\r\n                        textTransform: 'capitalize',\r\n                        marginLeft: '1em',\r\n                        borderRadius: '0.55em',\r\n                        }}\r\n                        className=\"b1\"\r\n                    >\r\n                        ðŸ‘¤ Unlock Referral Asks\r\n                    </Button>\r\n                </div>\r\n        </Card>\r\n        </Grid>\r\n      </ThemeProvider>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(CardLayout);","/**\r\n * This child component has the listings (being fetched from rest api) and its infintely scrollable\r\n * Challenges - implementing infinte scroll and data filtering based on value dispatched from options \r\n * - including search feature\r\n */\r\nimport '../App.css';\r\nimport {Grid} from \"@mui/material\";\r\nimport React, { useEffect } from \"react\";\r\nimport CardLayout from './Card';\r\nimport { useState } from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport { useMemo } from 'react';\r\nimport Loading from './utils/Loading';\r\nimport { API_URL } from './utils/constants';\r\n\r\n\r\nconst Listings = ({jobs}) => {\r\n  const searchQuery = useSelector(state => state.jobList.searchQuery);\r\n  \r\n  const selectedRole = useSelector(state => state.jobList.Role);\r\n  const selectedMinExp = useSelector(state => state.jobList.experience);\r\n  const selectedMinSalary = useSelector(state => state.jobList.minBase);\r\n  const selectedLocation = useSelector(state => state.jobList.location);\r\n\r\n  // debugging purpose logs\r\n  // console.log('From drop down these are the ones selected')\r\n  // console.log(selectedRole, selectedMinExp, selectedLocation, selectedMinSalary)\r\n\r\n  const [card, setCard] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const getCardData = async () => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const body = JSON.stringify({\r\n      \"limit\": 10,\r\n      \"offset\": page\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body\r\n    };\r\n\r\n    const response = await fetch(API_URL, requestOptions);\r\n    const data = await response.json();\r\n    console.log('the jobs at getCardData', jobs)\r\n\r\n    setCard(prevCard => [...prevCard, ...data.jdList]);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCardData();\r\n  }, [page]);\r\n\r\n  const handelInfiniteScroll = async () => {\r\n    try {\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop + 1 >=\r\n        document.documentElement.scrollHeight\r\n      ) {\r\n        setLoading(true);\r\n        setPage((prev) => prev + 1);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handelInfiniteScroll);\r\n    return () => window.removeEventListener(\"scroll\", handelInfiniteScroll);\r\n  }, []);\r\n\r\n  /**filtering out data based on role, experience,.. \r\n   * also made use of useMemo to memoize the function results to decrese unnecessary re-renders\r\n   * null values are filtered out\r\n  **/\r\n\r\n  const filteredData = useMemo(() => {\r\n    if (!card) return [];\r\n  \r\n    return card.filter(job => {\r\n      // Checking for null values in minExp and minJdSalary\r\n      const hasValidMinExp = job.minExp!== null;\r\n      const hasValidMinJdSalary = job.minJdSalary!== null;\r\n  \r\n      const matchesSearch = job.companyName.toLowerCase().includes(searchQuery.toLowerCase());\r\n      const matchesRole =!selectedRole || job.jobRole === selectedRole;\r\n      const matchesExp =!selectedMinExp || parseInt(selectedMinExp) <= job.minExp;\r\n      const matchesSalary =!selectedMinSalary || job.minJdSalary === parseInt(selectedMinSalary);\r\n      const matchesLocation =!selectedLocation || job.location === selectedLocation;\r\n  \r\n      return matchesSearch && matchesRole && matchesExp && matchesSalary && matchesLocation && hasValidMinExp && hasValidMinJdSalary;\r\n    });\r\n  }, [card, searchQuery, selectedRole, selectedMinExp, selectedMinSalary, selectedLocation]);\r\n    \r\n  return (\r\n    <Grid container spacing={2}>\r\n      {filteredData.map((item, index) => (\r\n        <React.Fragment key={index}>\r\n          <CardLayout\r\n            role={item.jobRole}\r\n            Location={item.location}\r\n            description={item.jobDetailsFromCompany}\r\n            company={item.companyName}\r\n            logoUrl={item.logoUrl}\r\n            minJdSalary={item.minJdSalary}\r\n            maxJdSalary={item.maxJdSalary}\r\n            // key={item}\r\n            minExp={item.minExp}\r\n          />\r\n        </React.Fragment>\r\n      ))}\r\n      {loading && <Loading/>}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(Listings);\r\n\r\n"],"names":["ReadMore","_ref","children","text","isReadMore","setIsReadMore","useState","_jsxs","className","style","fontFamily","fontSize","slice","_jsx","onClick","toggleReadMore","color","Typography","sx","fontWeight","theme","createTheme","breakpoints","values","xs","sm","md","lg","xl","CardLayout","role","Location","description","company","logoUrl","minJdSalary","maxJdSalary","minExp","ThemeProvider","Grid","item","Card","width","padding","borderRadius","transform","src","alt","variant","letterSpacing","marginBottom","cursor","margin","substr","marginLeft","Button","background","textTransform","marginTop","React","Listings","jobs","searchQuery","useSelector","state","jobList","selectedRole","Role","selectedMinExp","experience","selectedMinSalary","minBase","selectedLocation","location","card","setCard","page","setPage","loading","setLoading","useEffect","async","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","response","fetch","API_URL","data","json","console","log","prevCard","jdList","getCardData","handelInfiniteScroll","window","innerHeight","document","documentElement","scrollTop","scrollHeight","prev","error","addEventListener","removeEventListener","filteredData","useMemo","filter","job","hasValidMinExp","hasValidMinJdSalary","matchesSearch","companyName","toLowerCase","includes","matchesRole","jobRole","matchesExp","parseInt","matchesSalary","matchesLocation","container","spacing","map","index","jobDetailsFromCompany","Loading"],"sourceRoot":""}